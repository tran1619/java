Functional Programming Features:

Immutability
Higher-Order
Functional Composition & Lazy Evaluation
- remove code complexity


Composition - is the concept that you can construct a program by layering functions

Modularity - refers to the idea that you can take a program apart into modules.

Higher-Order Function - functions that accept functions as arguments

Polymorphic functions - When the inputs do not specify a type and instead offer the
                        freedom to work against any type.

                        - Fold is an example of polymorphism other examples include map and filter, etc.

"Doing less meas you can reason more about what functions will do."

When you have side effects, you don't really know what the code is going to do without reading
the entire source code to reason about how the state could possibly evolve in all scenarios.

instead

with pure functional programming, the scope of what you have to learn in any given moment
resolves solely around the function you are looking at.  This vastly simplifies the effort
required to understand what you need to know in any given moment.
This simplicity also leads to higher level of abstraction.

Abstraction - is about going to a higher semantic level of understanding while also being
more precise about what you are defining.
ex. of abstraction would be the identity function

Coding Styles:

Imperative programs tend to emphasize the series of steps taken by a program to carry out an action.

Functional programs tend to emphasize the composition and arrangement of functions, often without
    specifying explicit steps.

State changes are a side effect of imperative programming
Example: when an assignment statement mutates a variable by changing its stored value.

Another common side effect happens when modifying an imperative tunction's behavior based on a thrown exception,
which an observerable interaction with the caller.

Another common side effect occurs when an I/O operations inputs text that cannot be unread,
or outputs text that cannot be unwritten.

Eliminating side effects makes it much easier to understand and predict computational behavior.

5 Core Techniques used in Functional Programming:

1. Pure Functions,
2. Higher Order Functions
3. Lazy Evaluation
4. Closures
5. Currying

Predefined functional intefaces:

Java 8 introduced predefined functional interfaces(java.util.function) so that developers don't
have to create our own functional interfaces for common tasks.

Example: 

Consumer<T> accepts a single input argument and returns no result.
void accept(T t)

Function<T, R> - accepts a single input and returns a result
R apply(T t) method applies this function to argument t and returns the result.

Predicate<T> functional interface represents a predicate(Boolean valued function) of one argument
boolean test(T t) method avaluates this predicate on argument t and returns true or false.

Supplier<T> - functional inteface represents a Supplier of results.
T get() method receives no argument(s) but returns a result.

